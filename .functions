# create a new directory and change to it
mcd () {
  mkdir -p $1
  cd $1
}

function fh() {
  eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

random() {
  cat /dev/urandom | base64 | tr -dc '0-9a-zA-Z' | head -c15 | sed 's/$/\n/'
}

function taocl() {
  curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md |
    sed '/cowsay[.]png/d' |
    pandoc -f markdown -t html |
    xmlstarlet fo --html --dropdtd |
    xmlstarlet sel -t -v "(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]" |
    xmlstarlet unesc | fmt -80 | iconv -t US
}

function commit() {
  if [ "$#" -eq 0 ]; then
    echo 'usage: commit "stages all changes and commit"'
    return
  fi
  git add . && git commit -am "$1"
}

function gittag() {
  if [ "$#" -eq 0 ]; then
    echo 'usage: gittag 0.1.1 $commit'
    return
  fi
  git tag -a $1 -m "$1" $2
}

function flogsjson() {
  fargate service logs -f --start -$1m | awk '{$1=""; print}'
}


#######
# aws #
#######

function awsprofiles() {
  cat $HOME/.aws/credentials | grep ]
}

function awsprofile() {
  env | grep AWS_PROFILE
}

function setawsprofile() {

  # locate profile in credentials file
  profile=$(cat $HOME/.aws/credentials | grep -m1 $1)

  # strip leading/trailing brackets []
  result=${profile#"["}
  result=${result%"]"}

  # export profile
  export AWS_PROFILE=${result}

  # show current
  awsprofile
}

s3ls() {
  aws s3 ls --recursive --human-readable --summarize $1
}

s3cat() {
  aws s3 cp s3://$1 -
}

prompt_aws() {}
prompt_context() {}

# usage: ssh-cloud9 dev
function ssh-cloud9() {
  INSTANCE=$(aws ec2 describe-instances \
    --filters 'Name=tag:Name,Values=aws-cloud9-'$1'*' | \
    jq '.Reservations[0].Instances[0].InstanceId' -r)

  STATUS=$(aws ssm describe-instance-information \
    --filters Key=InstanceIds,Values=${INSTANCE} \
    --output text --query 'InstanceInformationList[0].PingStatus')

  if [ ${STATUS} = 'Online' ]; then
    echo "ssh-ing into ${INSTANCE}"
    aws ssm start-session --target ${INSTANCE}
  else
    aws ec2 start-instances --instance-ids ${INSTANCE}
    sleep 5
    COUNT=0
    while [ ${COUNT} -le 10 ]; do

      STATUS=`aws ssm describe-instance-information \
        --filters Key=InstanceIds,Values=${INSTANCE} \
        --output text --query 'InstanceInformationList[0].PingStatus'`

      if [ ${STATUS} = 'Online' ]; then
        break
      fi
      if [ ${COUNT} -eq 5 ]; then
        exit 1
      else
        let COUNT=COUNT+1
        sleep 5
      fi
    done

    echo "ssh-ing into $INSTANCE"
    aws ssm start-session --target $INSTANCE
  fi
}

# usage: CLUSTER_ARN=x SECRET_ARN=x DB_NAME=x rds-sql "select * from foo"
function rds-sql() {
  echo $1
  aws rds-data execute-statement \
    --resource-arn ${CLUSTER_ARN} \
    --secret-arn "${SECRET_ARN}" \
    --database ${DB_NAME} \
    --sql "$1"
  echo "____"
  echo ""
}


###########
# plugins #
###########

# download vim plugins defined in .vim-plugins
function install-vim-plugins() {
  echo "installing vim plugins"
  plugins=$HOME/.vim/pack/plugins/start
  rm -rf $plugins
  mkdir -p $plugins
  pushd $plugins
  cat $HOME/.vim-plugins | xargs -n 1 git clone
  popd
}

# download asdf plugins defined in .tool-plugins
function install-asdf-plugins() {
  echo "installing asdf plugins"
  cat $HOME/.tool-plugins | xargs -n 2 asdf plugin add
  asdf install
  asdf list
}

# install tmux plugins
function install-tmux-plugins() {
  echo "installing tmux plugins"
  plugins=$HOME/.tmux
  rm -rf $plugins
  mkdir -p $plugins
  pushd $plugins
  cat $HOME/.tmux-plugins | xargs -n 1 git clone
  popd
}

# install all plugins
function install-plugins() {
  install-vim-plugins
  install-asdf-plugins
  install-tmux-plugins
}

# upgrade an asdf tool
function asdf-upgrade() {
  if [ "$#" -eq 0 ]; then
    echo 'usage: asdf-upgrade golang 1.17.3'
    return
  fi
  asdf install $1 $2 && asdf global $1 $2
}

# removes all docker images that match a string
function remove-images-like() {
  docker rmi $(docker images | grep $1 | awk '{print $3}')
}

# creates a new python project
function python-new() {
  cp -R ~/code/python-template $1
  cd $1
  rm -rf .git
  git init
  git add .
  git defender --setup
  git commit -am "from python-template"
  make init
  make install
  echo ""
  echo "new project successfully created!"
  echo "cd $1"
  cd -
}

# creates a new terraform project
function terraform-new() {
  if [ "$#" -eq 0 ]; then
    echo 'usage: terraform-new new-app'
    return
  fi
  cp -R ~/code/terraform-starter $1
  cd $1
  rm -rf .git
  git init
  git add .
  git defender --setup
  git commit -am "from terraform-starter"
  make init
  echo ""
  echo "new project successfully created!"
  echo "cd $1"
  cd -
}

function ask() {
  if [ "$#" -eq 0 ]; then
    echo 'usage: ask "print some markdown"'
    echo "uses glow for formatting"
    return
  fi
  echo $1 | llm | glow
}

function summarize() {
   curl -sSL "$1" | llm -s "You are an expert document analyzer. Base your answer on only the provided data. Summarize the web page" | glow
}

function llm-prompt() {
  if [ "$#" -eq 0 ]; then
    echo 'usage: llm-prompt README.md touchup'
    return
  fi
  local branch=$2/$(date +"%m-%d-%H-%M-%S")
  git checkout -b $branch
  local model=bedrock-claude-v3.5-sonnet-v2
  echo "Invoking $model"
  cat $1 | llm -m $model \
    --template $2 > .temp && mv .temp $1
  git commit -am "llm --template $2"
  git checkout main
  git merge $branch
  git reset HEAD~1
  echo ""
  echo "Done. Changes from $branch are in working directory."
}

# usage: makefile-add deploy "deploy the container"
function makefile-add() {
  if [ "$#" -eq 0 ]; then
    echo 'usage: makefile-add deploy "deploy the container"'
    return
  fi
cat << EOF >> Makefile

## $1: $2
.PHONY: $1
$1:
	@echo "$2"
EOF
}
